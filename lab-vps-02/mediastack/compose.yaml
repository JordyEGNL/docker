services:
  mediastack-diskchecker:
    container_name: mediastack-diskchecker
    image: alpine:3.21.3
    volumes:
      - ${MOUNT_ROOT}:/mnt/externaldisk:ro
    command:
      - "/bin/sh"
      - "-c"
      - "[ -f /mnt/externaldisk/.995b1a8f-37db-4aaa-aa97-d703d7670595 ]"
    network_mode: none

  jellyfin:
    container_name: jellyfin
    image: jellyfin/jellyfin:10.10.7
    user: 1000:1000
    group_add:
      - "109" # Change this to match your "render" host group id
    volumes:
      - /home/jordy/docker/mediastack/jellyfin/config:/config
      - /home/jordy/docker/mediastack/jellyfin/cache:/cache
      - ${MEDIA_ROOT}:/data
    depends_on:
      mediastack-diskchecker:
        condition: service_completed_successfully
        restart: true
    ports:
      - 8096:8096
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
    labels:
      traefik.enable: true
      traefik.http.routers.jellyfin.entryPoints: websecure
      traefik.http.services.jellyfin.loadbalancer.server.port: 8096
      traefik.http.routers.jellyfin.rule: Host(`jellyfin.hoebergen.net`)
    restart: always
    networks:
      - mediastack
      - frontend

  jellystat-db:
    container_name: jellystat-db
    image: postgres:15.12
    environment:
      - POSTGRES_DB=jfstat
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${JELLYSTAT_POSTGRES_PASSWORD}
    volumes:
      - /home/jordy/docker/mediastack/jellystat/postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - mediastack

  jellystat:
    container_name: jellystat
    image: cyfershepard/jellystat:1.1.6
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${JELLYSTAT_POSTGRES_PASSWORD}
      - POSTGRES_IP=jellystat-db
      - POSTGRES_PORT=5432
      - JWT_SECRET="${JELLYSTAT_JWT}"
    labels:
      traefik.enable: true
      traefik.http.routers.jellystat.entryPoints: websecure
      traefik.http.services.jellystat.loadbalancer.server.port: 3000
      traefik.http.routers.jellystat.rule: Host(`stats.jellyfin.hoebergen.net`)
      traefik.http.routers.jellystat.middlewares: localAccess@file
    volumes:
      - /home/jordy/docker/mediastack/jellystat/backup-data:/app/backend/backup-data
    depends_on:
      - jellystat-db
      - jellyfin
    restart: unless-stopped
    networks:
      - mediastack
      - frontend

  jellyseerr:
    image: fallenbagel/jellyseerr:2.5.2
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=info
      - TZ=Europe/Amsterdam
    ports:
      - ${LOCAL_IP}:5055:5055
    volumes:
      - /home/jordy/docker/mediastack/jellyseerr/config:/app/config
    labels:
      traefik.enable: true
      traefik.http.routers.jellyseerr.entryPoints: websecure
      traefik.http.services.jellyseerr.loadbalancer.server.port: 5055
      traefik.http.routers.jellyseerr.rule: Host(`request.hoebergen.net`)
    restart: unless-stopped
    depends_on:
      - jellyfin
      - radarr
      - sonarr
    networks:
      - mediastack
      - frontend

  radarr:
    image: lscr.io/linuxserver/radarr:5.22.4
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    volumes:
      - /home/jordy/docker/mediastack/radarr/config:/config
      - ${MOUNT_ROOT}:/data
    depends_on:
      mediastack-diskchecker:
        condition: service_completed_successfully
        restart: true
    ports:
      - ${LOCAL_IP}:7878:7878
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.radarr.entryPoints: websecure
      traefik.http.services.radarr.loadbalancer.server.port: 7878
      traefik.http.routers.radarr.rule: Host(`radarr.hoebergen.net`)
      traefik.http.routers.radarr.middlewares: authentik@file,localAccess@file
    networks:
      - mediastack
      - frontend

  sonarr:
    image: lscr.io/linuxserver/sonarr:4.0.14
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    volumes:
      - /home/jordy/docker/mediastack/sonarr/config:/config
      - ${MOUNT_ROOT}:/data
    depends_on:
      mediastack-diskchecker:
        condition: service_completed_successfully
        restart: true
    ports:
      - ${LOCAL_IP}:8989:8989
    labels:
      traefik.enable: true
      traefik.http.routers.sonarr.entryPoints: websecure
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
      traefik.http.routers.sonarr.rule: Host(`sonarr.hoebergen.net`)
      traefik.http.routers.sonarr.middlewares: authentik@file,localAccess@file
    restart: unless-stopped
    networks:
      - mediastack
      - frontend

  bazarr:
    image: lscr.io/linuxserver/bazarr:1.5.1
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    volumes:
      - /home/jordy/docker/mediastack/bazarr/config:/config
      - ${MEDIA_ROOT}/movies:/movies
      - ${MEDIA_ROOT}/series:/series
    depends_on:
      mediastack-diskchecker:
        condition: service_completed_successfully
        restart: true
    ports:
      - ${LOCAL_IP}:6767:6767
    labels:
      traefik.enable: true
      traefik.http.routers.bazarr.entryPoints: websecure
      traefik.http.services.bazarr.loadbalancer.server.port: 6767
      traefik.http.routers.bazarr.rule: Host(`bazarr.hoebergen.net`)
      traefik.http.routers.bazarr.middlewares: authentik@file,localAccess@file
    restart: unless-stopped
    networks:
      - mediastack
      - frontend

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:1.35.1
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Amsterdam
    volumes:
      - /home/jordy/docker/mediastack/prowlarr/config:/config
    ports:
      - ${LOCAL_IP}:9696:9696
    labels:
      traefik.enable: true
      traefik.http.routers.prowlarr.entryPoints: websecure
      traefik.http.services.prowlarr.loadbalancer.server.port: 9696
      traefik.http.routers.prowlarr.rule: Host(`prowlarr.hoebergen.net`)
      traefik.http.routers.prowlarr.middlewares: authentik@file,localAccess@file
    restart: unless-stopped
    networks:
      - mediastack
      - frontend

  qbittorrent:
    container_name: qbittorrent
    image: binhex/arch-qbittorrentvpn:5.1.0-1-01
    environment:
      - PGID=1000
      - PUID=1000
      - UMASK=000
      - WEBUI_PORT=8080
      - DEBUG=false
      - NAME_SERVERS=1.1.1.1
      - LAN_NETWORK=${LAN_NETWORK}
      - ENABLE_SOCKS=no
      - USERSPACE_WIREGUARD=no
      - STRICT_PORT_FORWARD=no
      - ENABLE_PRIVOXY=no
      - ENABLE_STARTUP_SCRIPTS=no
      - VPN_CLIENT=wireguard
      - VPN_PROV=pia
      - VPN_USER=${PIA_USER}
      - VPN_PASS=${PIA_PASSWORD}
      - VPN_ENABLED=yes
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - /home/jordy/docker/mediastack/qbittorrent:/config
      - '${MOUNT_ROOT}/qbittorrent/downloads:/downloads'
    depends_on:
      mediastack-diskchecker:
        condition: service_completed_successfully
        restart: true
    ports:
      - '58946:58946/udp'
      - '58946:58946'
    privileged: true
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.qbittorrent.entryPoints: websecure
      traefik.http.services.qbittorrent.loadbalancer.server.port: 8080
      traefik.http.routers.qbittorrent.rule: Host(`qbittorrent.hoebergen.net`)
      traefik.http.routers.qbittorrent.middlewares: localAccess@file
    networks:
      - mediastack
      - frontend

  cleanuperr:
    container_name: cleanuperr
    image: ghcr.io/flmorg/cleanuperr:1.6.7
    restart: unless-stopped
    volumes:
      - /home/jordy/docker/mediastack/cleanuperr/logs:/var/logs
    environment:
      - TZ=Europe/Amsterdam
      - DRY_RUN=false
      ## Basic
      - LOGGING__LOGLEVEL=Information
      - LOGGING__FILE__ENABLED=false
      - LOGGING__ENHANCED=true
      ## Triggers
      - TRIGGERS__QUEUECLEANER=0 0/30 * * * ?
      - TRIGGERS__CONTENTBLOCKER=0 0/30 * * * ?
      - TRIGGERS__DOWNLOADCLEANER=0 0 * * * ?
      ## Queue cleaner
      - QUEUECLEANER__ENABLED=true
      - QUEUECLEANER__RUNSEQUENTIALLY=true
      - QUEUECLEANER__IMPORT_FAILED_MAX_STRIKES=5
      - QUEUECLEANER__IMPORT_FAILED_IGNORE_PRIVATE=false
      - QUEUECLEANER__IMPORT_FAILED_DELETE_PRIVATE=false
      - QUEUECLEANER__IMPORT_FAILED_IGNORE_PATTERNS__0=title mismatch
      - QUEUECLEANER__IMPORT_FAILED_IGNORE_PATTERNS__1=manual import required
      - QUEUECLEANER__STALLED_MAX_STRIKES=5
      - QUEUECLEANER__STALLED_RESET_STRIKES_ON_PROGRESS=false
      - QUEUECLEANER__STALLED_IGNORE_PRIVATE=false
      - QUEUECLEANER__STALLED_DELETE_PRIVATE=false
      ## Content blocker
      - CONTENTBLOCKER__ENABLED=true
      - CONTENTBLOCKER__IGNORE_PRIVATE=false
      - CONTENTBLOCKER__DELETE_PRIVATE=false
      ## Download cleaner
      - DOWNLOADCLEANER__ENABLED=false
      ## Download client
      - DOWNLOAD_CLIENT=qBittorrent
      - QBITTORRENT__URL=http://qbittorrent:8080
      - QBITTORRENT__USERNAME=${QBITTORRENT_USERNAME}
      - QBITTORRENT__PASSWORD=${QBITTORRENT_PASSWORD}
      ## Sonarr
      - SONARR__ENABLED=true
      - SONARR__SEARCHTYPE=Episode
      - SONARR__BLOCK__TYPE=blacklist
      - SONARR__BLOCK__PATH=https://raw.githubusercontent.com/flmorg/cleanuperr/refs/heads/main/blacklist
      - SONARR__INSTANCES__0__URL=http://sonarr:8989
      - SONARR__INSTANCES__0__APIKEY=${SONARR_API_KEY}
      ## Radarr
      - RADARR__ENABLED=true
      - RADARR__BLOCK__TYPE=blacklist
      - RADARR__BLOCK__PATH=https://raw.githubusercontent.com/flmorg/cleanuperr/refs/heads/main/blacklist
      - RADARR__INSTANCES__0__URL=http://radarr:7878
      - RADARR__INSTANCES__0__APIKEY=${RADARR_API_KEY}
    networks:
      - mediastack

networks:
  frontend:
    name: frontend
    external: true
  mediastack:
    name: backend-mediastack
